#Setup docker, cli and compose    
    curl -fsSL https://get.docker.com -o get-docker.sh
    DRY_RUN=1 sh ./get-docker.sh
    sudo sh get-docker.sh
    sudo apt -y install docker-compose
    # for saving docker login to be able to push images
    sudo apt -y install gnupg2 pass 
    # change the storage folder for more space to commit the image
    sudo docker rm -f $(docker ps -aq); docker rmi -f $(docker images -q)
    sudo systemctl stop docker
    umount /var/lib/docker
    sudo rm -rf /var/lib/docker
    sudo mkdir /var/lib/docker
    sudo mkdir /dev/mkdocker
    sudo mount --rbind /dev/mkdocker /var/lib/docker
    sudo systemctl start docker

#Set a docker compose file    
    mkdir microsuite
    cd microsuite
    git clone https://github.com/ucy-xilab/MicroSuite.git
    cd MicroSuite
    
    # Change to docker group
    sudo newgrp docker
    
    # Run docker compose example
    sudo docker compose up
    
    nano Dockerfile
----------- File content --------------
# syntax=docker/dockerfile:1
FROM ubuntu:18.04
COPY ./MicroSuite /MicroSuite
CMD ["bash"]
--------- __File content__ ------------

    nano docker-compose.yml
----------- File content --------------
version: "3"
services:
  hdsearch:
    image: mklean/baseline-microsuite:hdsearch_router_setalgebra_recommend
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
        - "50050:50050"
        - "50051:50051"
        - "50052:50052"
        - "11211:11211"
--------- __File content__ ------------
    
    
-----------------------------------------------------------------------------------------------

BASELINE SETUP (While docker compose running) - in new terminal
---------------------------------------------
# Get into the container
cd microsuite
su
docker-compose exec hdsearch sh

# Install dependancies for microsuite
su
apt-get update
apt-get -y install build-essential autoconf libtool curl cmake git pkg-config
apt-get -y install libz-dev
apt-get -y install nano
apt-get -y install wget
apt-get -y install npm
npm install -g @bazel/bazelisk

#grpc
git clone -b v1.26.0 https://github.com/grpc/grpc
cd grpc
git submodule update --init
nano src/core/lib/debug/trace.cc
#CHANGE 
void TraceFlagList::Add(TraceFlag* flag) {
  flag->next_tracer_ = root_tracer_;
  root_tracer_ = flag;
}
#_CHANGE
#TO
void TraceFlagList::Add(TraceFlag* flag) {
  for (TraceFlag* t = root_tracer_; t != nullptr; t = t->next_tracer_) {
    if (t == flag) {
      return;
    }
  }
  flag->next_tracer_ = root_tracer_;
  root_tracer_ = flag;
#_TO
make
make install
cd ../

#protobuf
wget https://github.com/protocolbuffers/protobuf/releases/download/v3.8.0/protobuf-cpp-3.8.0.tar.gz
tar -xzvf protobuf-cpp-3.8.0.tar.gz
cd protobuf-3.8.0/
./configure
make
make check
make install
ldconfig
cd ../

# OpenSSL and Intel's MKL
apt-get -y install openssl
apt-get -y install libssl-dev
apt-get -y install cpio
wget https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/12725/l_mkl_2018.2.199.tgz
tar xzvf l_mkl_2018.2.199.tgz
cd l_mkl_2018.2.199
./install.sh
cd ../

# FLAN
cd /MicroSuite/src/HDSearch/mid_tier_service/
mkdir build
cd build
cmake ..
make install
make

# MLPACK
apt-get -y install libmlpack-dev

-----------------------------------------------------------------------------------------------

# HDSearch benchmark
-------------------
cd /MicroSuite/src/HDSearch/protoc_files
make

cd /MicroSuite/src/HDSearch/bucket_service/service/helper_files

nano server_helper.cc
#include <grpc/grpc.h>
#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>

nano client_helper.cc
#include <grpcpp/channel.h>
#include <grpcpp/client_context.h>
#include <grpc/status.h>

cd ../
make

cd ../../mid_tier_service/service/
apt-get install libboost-all-dev
apt-get install sudo -y
make

# BELOW NOT WORKING AT THE MOMENT. NOT SURE IF BCC tools are needed for the benchmark. 
# Nothing is mentioned in the guide but mid-tier is looking form them but doesn't crash. 
# Below an example on how to install them but that creates further errors
#_______
apt-get install bpfcc-tools linux-headers-$(uname -r)
mkdir /usr/share/bcc/
mkdir /usr/share/bcc/tools/
ln -s /usr/sbin/softirqs-bpfcc /usr/share/bcc/tools/softirqs
ln -s /usr/sbin/runqlat-bpfcc /usr/share/bcc/tools/runqlat
ln -s /usr/sbin/tcpretrans-bpfcc /usr/share/bcc/tools/tcpretrans
ln -s /usr/sbin/syscount-bpfcc /usr/share/bcc/tools/syscount
ln -s /usr/sbin/hardirqs-bpfcc /usr/share/bcc/tools/hardirqs
#_______

cd ../../load_generator/
make

-----------------------------------------------------------------------------------------------

#Router benchmark
-------------------

cd /MicroSuite/src/Router/protoc_files
make clean
make

cd ../lookup_service/service
apt -y install libmemcached-dev
make

cd ../../mid_tier_service/service/
nano ../../lookup_service/service/helper_files/client_helper.cc
#include <grpcpp/channel.h>
make

cd ../../load_generator/
make

# mecachaded installation for this benchmark. Guide followed -> https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-memcached-on-ubuntu-18-04
apt install memcached
apt install libmemcached-tools
apt install systemd
service memcached restart


-----------------------------------------------------------------------------------------------

#Setalgebra benchmark
-------------------
cd /MicroSuite/src/SetAlgebra/protoc_files
make clean
make

cd ../intersection_service/service/
make

cd ../../union_service/service
nano ../../intersection_service/service/helper_files/client_helper.cc
#include <grpcpp/channel.h>
make

cd ../../load_generator/
make

#Reccomend benchmark
-------------------
cd /MicroSuite/src/Recommend/protoc_files
make

cd /MicroSuite/src/Recommend/cf_service/service/
nano +280 cf_server.cc
CF cf_matrix(dataset, amf::NMFALSFactorizer(), 5, 5);    
//cf_matrix = new CF(dataset, amf::NMFALSFactorizer(), 5, 5);    
//cf_matrix->Init();

nano helper_files/client_helper.cc
#include <grpcpp/channel.h>
make

cd ../../recommender_service/service/
make

cd ../../load_generator/
make


-----------------------------------------------------------------------------------------------

Committing image
---------------------
docker image prune # save space by removing uncessesary/dangling images
docker system prune --all --force --volumes # remove all unused images and containers 

# commit image
sudo docker login -u mklean # login to docker
sudo docker ps
sudo docker commit <container id>
sudo docker images

# tag image for 18.4
sudo docker image tag d061174c1dfb mklean/baseline-microsuite
# push image
sudo docker push mklean/baseline-microsuite:latest 

sudo docker image tag d061174c1dfb mklean/baseline-microsuite:hdsearch
sudo docker push mklean/baseline-microsuite:hdsearch

sudo docker image tag d061174c1dfb mklean/baseline-microsuite:hdsearchv2
sudo docker push mklean/baseline-microsuite:hdsearchv2

sudo docker image tag d061174c1dfb mklean/baseline-microsuite:hdsearch_router_setalgebra_recommend
sudo docker push mklean/baseline-microsuite:hdsearch_router_setalgebra_recommend

# Find the IP using
sudo docker network ls
sudo docker inspect  <NETWORK ID>
